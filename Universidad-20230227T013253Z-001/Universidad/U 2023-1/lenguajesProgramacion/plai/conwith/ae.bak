#lang plai

;TAREA AGREGAR +L {1 5 8} = 14

;; BNF
;;<AE> ::-<number>
;;     | {+ <WAE> <WAE>}
;;     | {- <WAE> <WAE>}
;;     | {* <WAE> <WAE>}



;; Arithmetic Expression data type
(define-type WAE
  [num (n number?)]
  [add (l WAE?)(r WAE?)]
  [sub (l WAE?)(r WAE?)]
  [mul (l WAE?)(r WAE?)] 
  [fac (n WAE?)]
  [div (l WAE?)(r WAE?)]
  [with (name symbol?) (value WAE?) (body WAE?)]
  [id (name symbol?)]
)

;; parse : program -> AST (AE)
(define (parse program)
  (cond
    [(number? program) (num program)]
    [(symbol? program) (id program)]
    [(list? program)
     (case (first program)
       [(+) (add (parse(second program))
                 (parse(third program)))]
       [(-) (sub (parse(second program))
                 (parse(third program)))]
       [(*) (mul (parse(second program))
                 (parse(third program)))]
       [(!) (fac (parse(second program)))]
       [(/) (div (parse(second program))
                 (parse(third program)))]
       [(++) (add (parse(second program)) (num 1))]
       [(--) (sub (parse(second program)) (num 1))]
       [(with) (with (first(second program))
                 (parse(second(second program)))
                 (parse(third program))
                 )]
       )]
    ))


(define (factorial n)
  (if (<= n 1) 
      n
      (* n (factorial (- n 1)))))

(define (division l r)
  (if (= r 0)
      (error "error división entre cero")
      (/ l r)))

; El interprete
; interp: AST -> number
(define (interp program)
  (type-case WAE program
             [num (n) n] 
             [add (l r) (+ (interp l) (interp r))] 
             [sub (l r) (- (interp l) (interp r))]
             [mul (l r) (* (interp l) (interp r))]
	     [fac (n) (factorial (interp n))]
             [div (l r) (division (interp l) (interp r))]
             )) 

; Una función para simplificar el uso
(define (ejecutar program) 
  (interp (parse program)))


; TEST PARSER
(test (parse '3) (num 3))
(test (parse '{+ 1 2}) (add (num 1) (num 2)))
(test (parse '{+ {- 2 1} 3}) (add (sub (num 2) (num 1)) (num 3)))


; TEST INTERPRETE
(test (ejecutar '3) 3)
(test (ejecutar '{+ 1 2}) 3)
(test (ejecutar '{+ {- 2 1} 3}) 4)

;; TEST PARA !
(test (ejecutar '{! 3}) 6)

;; TESTS PARA ^
(test (ejecutar '{* 2 3}) 6)
(test (ejecutar '{+ {* 2 3} 2}) 8)
(test (ejecutar '{+ {* {+ 1 1} 3} 2}) 8)

;; TEST PARA /
(test (ejecutar '{/ 6 2}) 3)
(test/exn (ejecutar '{/ 6 0}) "error división entre cero")

;; TEST PARA ++
(test (ejecutar '{++ 6}) 7)
(test (ejecutar '{++ (+ 5 4)}) 10)